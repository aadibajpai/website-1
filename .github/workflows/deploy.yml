name: Deploy

on:
  push:
    tags:
      - '*'

jobs:
  infrastructure:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.1.1

      - name: Zip Backend Functions
        run: |
          cd backend
          zip -r src.zip functions node_modules utils package.json package-lock.json

      - name: Move Dependencies
        run: |
          mkdir infrastructure/dependencies
          FUNCTIONS_VERSION=$(cat backend/package.json \
           | grep version \
           | head -1 \
           | awk -F: '{ print $2 }' \
           | sed 's/[",]//g' \
           | sed 's/^ *//g')
          API_VERSION=$(cat backend/oas.json \
           | grep version \
           | head -1 \
           | awk -F: '{ print $2 }' \
           | sed 's/[",]//g' \
           | sed 's/^ *//g')
          echo -n $FUNCTIONS_VERSION > infrastructure/dependencies/functions.version
          echo -n $API_VERSION > infrastructure/dependencies/api.version
          cp backend/oas.json infrastructure/dependencies/oas.json
          cp backend/src.zip infrastructure/dependencies/src.zip

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt
        working-directory: infrastructure

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: infrastructure

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        working-directory: infrastructure

  content:
    runs-on: ubuntu-latest

    needs: infrastructure

    steps:
      - uses: actions/checkout@v2.1.1

      - name: Get Node.js version
        id: nvm
        run: echo ::set-output name=NODE_VERSION::$(cat frontend/.nvmrc)

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.nvm.outputs.NODE_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Generate Static Site
        run: |
          cd frontend
          nvm install && nvm use
          npm install
          npm run build
          npm run generate

      - name: Push Static Site
        env:
          S3_BUCKET_FRONTEND: ${{ secrets.S3_BUCKET_FRONTEND}}
        run: |
          cd frontend/dist
          aws s3 sync . "s3://$S3_BUCKET_FRONTEND" --exclude "_nuxt/*" --delete --cache-control "max-age=3600"
          aws s3 sync _nuxt/ "s3://$S3_BUCKET_FRONTEND"/_nuxt --delete --cache-control "max-age=31536000, immutable"

  api:
    runs-on: ubuntu-latest

    needs: infrastructure

    steps:
      - uses: actions/checkout@v2.1.1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get OAS
        env:
          API_ID: ${{ secrets.API_ID}}
          API_STAGE: ${{ secrets.API_STAGE}}
          AWS_REGION: ${{ secrets.AWS_REGION}}
        run: |
          mkdir ./infrastructure/files
          aws apigateway get-export \
           --rest-api-id $API_ID \
           --stage-name $API_STAGE \
           --export-type oas30 \
           --region $API_REGION \
           ./infrastructure/files/oas-rendered.json

      - uses: readmeio/github-readme-sync@2.0.0
        with:
          readme-oas-key: '${{ secrets.README_OAS_KEY }}'
          oas-file-path: './infrastructure/files/oas-rendered.json'
